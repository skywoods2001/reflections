Q1: What happens when you initialize a repository? Why do you need to do it?

Ans: A .git folder is added to the directory. You need this file in order to keep track of all the editing history.

Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?

Ans: You can only commit the files in the staging area. It gives you a chance to commit only a subset of (logically connected) files.

Q3: How can you use the staging area to make sure you have one commit per logical change?

Ans: Add changes -> stage the changes -> commit the changes -> add other logical changes

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Ans: When you want to add new experimental features or creating new languange versions of the codebase without changing the master branch. In this case, you can show both your ongoing work as well as the original workable code in the master branch.

Q5: How do the diagrams help you visualize the branch structure?

Ans: It illustrate the relations between differenet branches and shows unreachable commits.

Q6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Ans: The features in the two branches are combined. Commits on the two old branches are considered as the parents of the merged commit.

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Ans: Git automatic merging may not meet the actual intention of the designer and may even lead to uncompliable codes. Merging it manually may be time consuming but can be more correct.